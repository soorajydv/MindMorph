generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["referentialActions"]
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../ERD.svg"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum OAuthProvider {
  GOOGLE
  FACEBOOK
  MICROSOFT
  GITHUB
  TWITTER
}

enum Language {
  English
  Nepali
  Hindi
}

model OAuthUser {
  id            Int            @id @default(autoincrement())
  fullName      String
  email         String
  avatarUrl     String?
  oauthId       String
  oauthProvider OAuthProvider?
  socialHandle  SocialHandle[]
}

model SocialHandle {
  id          Int       @id @default(autoincrement())
  website     String?   @unique
  twitter     String?   @unique
  youtube     String?   @unique
  linkdin     String?   @unique
  facebook    String?   @unique
  google      String?   @unique
  user        User?     @relation(fields: [userId], references: [id])
  userId      Int?      @unique
  OAuthUser   OAuthUser @relation(fields: [oAuthUserId], references: [id])
  oAuthUserId Int
}

model CourseDomain {
  id               Int              @id @default(autoincrement())
  name             String
  // Foreign Keys
  courseCategories CourseCategory[]
}

model CourseCategory {
  id             Int          @id @default(autoincrement())
  name           String
  coursedomain   CourseDomain @relation(fields: [courseDomainId], references: [id])
  courseDomainId Int

  // Foreign Keys
  courseId Course[]
  Game     Game[]
}

model Course {
  id               Int            @id @default(autoincrement())
  title            String
  courseCategory   CourseCategory @relation(fields: [courseCategoryId], references: [id])
  courseCategoryId Int
  description      String         @db.VarChar(1000)
  objective        String         @db.VarChar(1000)
  requirement      String         @db.VarChar(1000)
  syllabus         String         @db.VarChar(10000)
  author           User           @relation(fields: [authorId], references: [id])
  authorId         Int
  language         Language       @default(English)
  price            Float
  discountPercent  Float?
  rating           Float?
  titleVideo       String?
  ratingCount      Int            @default(0)
  enrollCount      Int            @default(0)
  thumbnail        String?
  subtitle         String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Foreign Keys
  courseReview   CourseReview[]
  qna            QnA[]
  cart           Cart[]
  EnrolledCourse EnrolledCourse[]
}

model CourseReview {
  id          Int      @id @default(autoincrement())
  course      Course   @relation(fields: [courseId], references: [id])
  courseId    Int
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  description String   @db.VarChar(500)
  rating      Float
  updatedAt   DateTime @updatedAt
}

model CourseReviewReply {
  id             Int      @id @default(autoincrement())
  User           User     @relation(fields: [userId], references: [id])
  userId         Int
  description    String   @db.VarChar(500)
  updatedAt      DateTime @updatedAt
  idCourseReview Int
}

model QnA {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  course        Course   @relation(fields: [courseId], references: [id])
  courseId      Int
  description   String   @db.VarChar(500)
  updatedAt     DateTime @updatedAt
  responseCount Int      @default(0)
}

model QnAReply {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  description String   @db.VarChar(500)
  updatedAt   DateTime @updatedAt
  idQnA       Int
}

model Cart {
  id         Int      @id @default(autoincrement())
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   Int
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  craetedAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isCheckout Boolean
}

model EnrolledCourse {
  id         Int      @id @default(autoincrement())
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   Int
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  enrolledAt DateTime @default(now())
}

model User {
  id        Int       @id @default(autoincrement())
  fullName  String
  email     String    @unique
  password  String
  role      Role      @default(STUDENT)
  avatar    String?
  birthdate DateTime?
  createdAt DateTime  @default(now())

  // if authenticates using oauth 
  oauthId       String?
  oauthProvider OAuthProvider?

  // Foreign Keys
  socialHandle      SocialHandle?
  course            Course[]
  courseReview      CourseReview[]
  qna               QnA[]
  courseReviewReply CourseReviewReply[]
  cart              Cart[]
  QnAReply          QnAReply[]
  EnrolledCourse    EnrolledCourse[]
  sentMessages      Message[]           @relation("sentMessages")
  receivedMessages  Message[]           @relation("receivedMessages")
  conversation      Conversation[]
  GameView          GameView[]
}

model Message {
  id             Int           @id @default(autoincrement())
  message        String
  sender         User          @relation(name: "sentMessages", fields: [senderId], references: [id])
  receiver       User          @relation(name: "receivedMessages", fields: [receiverId], references: [id])
  senderId       Int
  receiverId     Int
  Conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId Int?
  createdAt      DateTime      @default(now())
}

model Conversation {
  id           Int       @id @default(autoincrement())
  participants User[]
  messages     Message[]
  createdAt    DateTime  @default(now())
}

// Define the Game model
model Game {
  id               Int                @id @default(autoincrement())
  viewsCount       Int                @default(0)
  courseCategory   CourseCategory     @relation(fields: [courseCategoryId], references: [id])
  courseCategoryId Int
  GameView         GameView[]
  gamificationData GamificationData[]
}

model GamificationData {
  id       Int     @id @default(autoincrement())
  text     String
  imageUrl String?
  gameId   Int
  game     Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model GameView {
  id       Int    @id @default(autoincrement())
  userId   Int
  gameId   Int
  viewTime String
  game     Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id            Int         @id @default(autoincrement())
  userId        Int
  courseId      Int
  paymentMethod String
  amount        Float
  txnId         Int      @unique
  transaction   Transaction @relation(fields: [txnId], references: [id])
  createdAt    DateTime  @default(now())
}

model Transaction {
  id      Int      @id @default(autoincrement())
  oid     String   @unique
  refid   String
  amt     Float
  payment Payment?
  createdAt    DateTime  @default(now())
}

model Swiper{
  id      Int      @id @default(autoincrement())
  swiperPath String
  isVisible Boolean @default(true)
}